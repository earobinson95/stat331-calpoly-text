---
execute:
  freeze: auto  # re-render only when source changes
  warning: false
  message: false
editor: source
---

```{r}
#| echo: false
bytes <- file.size("06-version-control.qmd")
words <- bytes/10
minutes <- words/200
```

# Version Control

```{r fa-setup}
#| include: false
library(quarto)
library(fontawesome)
library(ggplot2)
fa_html_dependency()
library(knitr)
library(kableExtra)
library(tidyverse)
# htmltools::tagList(rmarkdown::html_dependency_font_awesome())
```

`r fa("book-open")` Reading: `r ceiling(minutes)` minute(s) at 200 WPM

`r fa("video")` Videos: 0 minute(s)

## Objectives {#ch6-objectives .unnumbered}

Most of this section is either heavily inspired by Happy Git and Github for the UseR [@bryanHappyGitGitHub2021] or directly links to that book. 

+ Recognize the benefits of using version control to improve your coding practices and workflow.
+ Identify git/GitHub as a version control platform (and helper).
+ Register for a GitHub account so you can begin applying version control practices to your workflow.

<br>

<!-- ::: check-in -->
<!-- ## Check-ins {#ch6-checkins .unnumbered} -->

<!-- There are two check-ins for this week: -->

<!-- + [Check-in 6.1: Install Git](#checkin6-1) -->
<!-- + [Check-in 6.2: Create a GitHub Account](#checkin6-2) -->

<!-- ::: -->

## What is Version Control?

Version control is a system that (1) allows you to store your files in the cloud, (2) track change in those files over time, and (3) share your files with others.

::: learn-more
### Learn more about version control {-}

If you are unfamiliar with the idea of version control, this [article](https://about.gitlab.com/topics/version-control/) describes what the principles of version control are.
:::

## Git

Git is a **version control system** - a structured way for tracking changes to files over the course of a project that may also make it easy to have multiple people working on the same files at the same time. 

![Version control is the answer to this file naming  problem.](https://www.phdcomics.com/comics/archive/phd101212s.gif){width="50%"}

Git manages a collection of files in a structured way - rather like "track changes" in Microsoft Word or version history in Dropbox, but much more powerful.

If you are working alone, you will benefit from adopting version control because it will remove the need to add `_final.R` or `_final_finalforreal.qmd` to the end of your file names. However, most of us work in collaboration with other people (or will have to work with others eventually), so one of the goals of this program is to teach you how to use git because it is a useful tool that will make you a better collaborator. 

In data science programming, we use git for a similar, but slightly different purpose. We use it to keep track of changes not only to code files, but to data files, figures, reports, and other essential bits of information. 

Git itself is nice enough, but where git really becomes amazing is when you combine it with GitHub - an online service that makes it easy to use git across many computers, share information with collaborators, publish to the web, and more. Git is great, but GitHub is ... essential.


### Git Basics

![If that doesn't fix it, git.txt contains the phone number of a friend of mine who understands git. Just wait through a few minutes of 'It's really pretty simple, just think of branches as...' and eventually you'll learn the commands that will fix everything.](images/06-version-control/git.png){fig-alt="Person 1: 'This is GIT. It tracks collaborative work on projects through a beautiful distributed graph theory tree model'. Person 2: 'Cool, How do we use it?' Person 1: 'No Idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.'"}


Git tracks changes to each file that it is told to monitor, and as the files change, you provide short labels describing what the changes were and why they exist (called "**commits**"). The log of these changes (along with the file history) is called your **git commit history**. 

When writing papers, this means you can cut material out freely, so long as the paper is being tracked by git - you can always go back and get that paragraph you cut out if you need to. You also don't have to rename files - you can confidently save over your old files, so long as you remember to commit frequently. 

::: go-read
### Essential Reading: Git {-}
The git material in this chapter is just going to link directly to the book "Happy Git with R" by Jenny Bryan. It's amazing, amusing, and generally well written. I'm not going to try to do better. 

[Go read Chapter 1, until it starts to become greek (aka over your head).](https://happygitwithr.com/big-picture.html)
:::

<br>

<!-- ::: check-in -->
<!-- ### Check-in 6.1: Install Git {- #checkin6-1} -->

<!-- We will be working with Git/GitHub in groups during class this week. In order to be prepared, please install Git onto your computer -- we will be connecting this to RStudio together, but having this installed ahead of time avoids installation time during class. -->

<!-- + [Install Git for Windows](https://gitforwindows.org/) -->
<!-- + [Install Git for Macs](https://git-scm.com/downloads) -->

<!-- If you run into issues, read more about [installing Git](https://happygitwithr.com/install-git.html). -->

<!-- Once you have installed Git, tell me "yes" in the Canvas Quiz. -->
<!-- ::: -->

<br>
Now that you have a general idea of how git works and why we might use it, let's talk a bit about GitHub.

## GitHub: Git on the Web {#setting-up-github}

Git is a program that runs on your machine and keeps track of changes to files that you tell it to monitor. GitHub is a website that hosts people's git repositories. You can use git without GitHub, but you can't use GitHub without git. 

If you want, you can hook Git up to GitHub, and make a copy of your local git repository that lives in the cloud. Then, if you configure things correctly, your local repository will talk to GitHub without too much trouble. Using Github with Git allows you to **easily make a cloud backup of your important code**, so that even if your  computer suddenly catches on fire, all of your important code files exist somewhere else. 

Remember: any data you don't have in 3 different places is data you don't care about.^[Yes, I'm aware that this sounds paranoid. It's been a very rare occasion that I've needed to restore something from another backup. You don't want to take chances.]


<!-- ::: check-in -->
<!-- ### Check-in 6.2: Register a GitHub Account {- #checkin6-2} -->

<!-- Follow the instructions in [Registering a GitHub Account](https://happygitwithr.com/github-acct.html) to create a **free** GitHub account. -->

<!-- Copy and paste the link to your GitHub profile into the Canvas assignment. -->

<!-- + Your GitHub profile link should look like -- https://github.com/USERNAME -->
<!-- + Here is mine! [https://github.com/earobinson95](https://github.com/earobinson95) -->

<!-- (Optional) You may want to check out [GitHub Education](https://education.github.com/) and sign up for the [GitHub Student Developer Pack](https://education.github.com/pack). -->

<!-- ::: -->

<br>

::: watchout
### Save your login information! {-}
Make sure you remember your username and password so you don't have to try to hack into your own account during class this week.

Write your information down somewhere safe.
:::

### Optional: Install a git client {-}

[Instructions](https://happygitwithr.com/git-client.html)

::: my-opinion
I personally like to use [GitHub Desktop](https://desktop.github.com/) which allows me to interact with Git using a point-and-click interface.
:::

## Using Version Control (with RStudio)

This course will briefly introduced working with GitHub, but will not provide you with extensive practice using version control. By using version control, you will learn better habits for programming, and you'll get access to a platform for collaboration, hosting your work online, keeping track of features and necessary changes, and more. 

In class this week, we will connect git/GitHub to RStudio so you can use version control for your code. We will then see what a typical git/GitHub workflow looks like.

::: learn-more
## Learn More {-}

### Extra Resources {-}

- [Happy Git and GitHub for the useR](https://happygitwithr.com/index.html) - Guide to using git, R, and RStudio together. [@bryanHappyGitGitHub2021]

- [Git "Hello World" Tutorial on GitHub](https://guides.github.com/activities/hello-world/)

- [Crash course on git](https://www.youtube.com/watch?v=SWYqp7iY_Tc) (30 minute YouTube video) [@traversymediaGitGitHubCrash2017]

- [Git and GitHub for poets](https://www.youtube.com/watch?v=BCQHnlnPusY&list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV) YouTube playlist (this is supposed to be the best introduction to Git out there...) [@thecodingtrainIntroductionGitGitHub2016]

- [More advanced git concepts, in comic form](https://dev.to/erikaheidi/stage-commit-push-a-git-story-comic-a37), by Erika Heidi [@ericaheidiStageCommitPush2020]

- [A quick guide to the command line (Terminal)](https://towardsdatascience.com/a-quick-guide-to-using-command-line-terminal-96815b97b955) [@weiQuickGuideUsing2019]
:::

<br>

<!-- ::: tryitout -->
<!-- ### PA 6: Merge Conflicts {-} -->
<!-- In class, we will work together, step-by-step in groups, to resolve merge conflicts when collaborating with GitHub. See slide instructions [here](https://earobinson95.github.io/stat331-calpoly/lecture-slides/06-version-control-exam-review/06-version-control.html#/pa-6-merge-conflicts). -->

<!-- In order to receive credit for this practice activity, you **must** attend class. Please email your instructor if extenuating circumstances arise. -->
<!-- ::: -->

### References {-}
